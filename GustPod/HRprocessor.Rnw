%% LyX 2.1.0 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[12pt,english]{report}
\usepackage{mathptmx}
\usepackage[T1]{fontenc}
\usepackage[letterpaper]{geometry}
\geometry{verbose,tmargin=3.54cm,bmargin=2.54cm,lmargin=2.54cm,rmargin=2.54cm,headheight=1cm,headsep=2cm,footskip=0.5cm}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{color}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\input colordvi
\usepackage{color}
\fancyhead{}
\fancyfoot[CE,CO]{}
\newtoks{\addressee} \global\addressee={}
\newdimen\longindent \longindent=3.5truein
\fancyhead[L]{Memo to: \the\addressee \\ \datetoday \\ Page \thepage \hfill}
\renewcommand{\headrulewidth}{0.0pt}
\newenvironment{lyxlist}[1]
{\begin{list}{}
{\settowidth{\labelwidth}{#1}
\setlength{\leftmargin}{\labelwidth}
\addtolength{\leftmargin}{\labelsep}
\renewcommand{\makelabel}[1]{##1\hfil}}}
{\end{list}}
\newcommand{\datetoday}{\number\day\space
     \ifcase\month\or January\or February\or March\or April\or May\or
     June\or July\or August\or September\or October\or November\or
     December\fi
     \space\number\year}
\newcommand{\EOLmemo}{\null \vskip-1.5truein
{\raggedright \textsf{\textsc{\large \textcolor{blue}{Earth Observing Laboratory}}}}\par
{\raggedright \textsf{\textsl{\textcolor{blue}{Memorandum:}}}} \par \vskip6pt
{\color{blue}{\hrule}}\par
\vskip0.3truein \leftline{\hskip \longindent \datetoday} \vskip0.2truein
\thispagestyle{empty}}
\newcommand{\attachm}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachments:] {#1}
\end{lyxlist}}
\newcommand{\cc}[1]{\begin{lyxlist}{Attachments:00}
\item [cc:] {#1}
\end{lyxlist}}
\newcommand{\attach}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachment:] {#1}
\end{lyxlist}}
%usage: \encl{A\\B\\C} or \cc{ma,e1\\name2\\name3}

\makeatother

\usepackage{babel}
\begin{document}
\EOLmemo 

\global\addressee={DEEPWAVE field catalog}% change "File" to the "To:" name

\begin{tabular}{ll}
\textsf{\textsc{\textcolor{blue}{To:}}} & \the\addressee\tabularnewline
\textsf{\textsc{\textcolor{blue}{From:}}} & Al Cooper\tabularnewline
 \textsf{\textsc{\textcolor{blue}{Subject:}}} & Calibration results and processing of the gust-pod measurements on
the GV\tabularnewline
\end{tabular}

\bigskip

                                                                    
                                                                     
                                                                     %
                                                                     
                                                                     Flight RF15 on 3 July 2014 was devoted to calibration maneuvers. This
                                                                     note uses that flight, combined with similar calibration maneuvers flown on RF11 at 40,000 ft, to determine sensitivity coefficients for angle
                                                                     of attack (AKRD and AK\_GP) and for sideslip (SSRD and SS\_GP). It
                                                                     also describes some other results including timing studies.
                                                                     
                                                                     
                                                                     \section*{Calibration of the Angle of Attack}
                                                                     
                                                                     The first-order expression for the vertical wind $w$ is
                                                                     
                                                                     \begin{equation}
                                                                     w=V\sin(\alpha-\phi)+w_{p}\label{eq:VWind}
                                                                     \end{equation}
                                                                     
                                                                     
                                                                     where $V$ is the true airspeed, $\alpha$ the angle of attack, $\phi$
                                                                       the pitch, and $w_{p}$ the vertical motion or rate-of-climb of the
                                                                     aircraft. The solution for the angle-of-attack is
                                                                     
                                                                     \begin{equation}
                                                                     \alpha=\phi+\arcsin\frac{w-w_{p}}{V}\label{eq:SolvedForAOA}
                                                                     \end{equation}
                                                                     
                                                                     
                                                                     If it is reasonable to assume that $w$ is zero, or that it averages
                                                                     to zero, then 
                                                                     
                                                                     \begin{equation}
                                                                     \alpha^*=\phi-\arcsin\frac{w_{p}}{V}\label{eq:alphaWithwZero}
                                                                     \end{equation}
                                                                     
                                                                     
                                                                     can be used as a reference angle-of-attack to which to fit a functional for. It requires the measurements
                                                                     of pitch, rate-of-climb, and true airspeed. Even in the presence of
                                                                     waves, fitting to this as functions of the radome measurements and
                                                                     other flight characteristics should average any real effects of vertical
                                                                     wind as long as the vertical wind over the flight segments used averages
                                                                     to zero.
                                                                     
                                                                     In the case of the radome, the relevant variables are $\phi$=PITCH,
                                                                     $w_{p}=$VSPD, and $V=$TASX. The radome measures the pressure difference
                                                                     AKRD between top and bottom ports on the radome, and this pressure
                                                                     is usually normalized by some measure of dynamic pressure like QCXC
                                                                     or QCRC. The former is preferable because the latter is sometimes
                                                                     affected by icing or freezing of accumulated water even when AKRD
                                                                     continues to function. 
                                                                     
                                                                     For the gust pod, the relevant variables are $\phi=$CPITCH\_GP, $w_{p}=$CVSPD\_GP,
                                                                     and $V=$TASX. The gust-pod measurements differ from those measured
                                                                     relative to the fuselage; for example, the pitch of the gust pod is
                                                                     several degrees different from that of the fuselage because of the
                                                                     way in which the gust-pod IRU is installed. However, the true airspeed
                                                                     $V$ in (\ref{eq:alphaWithwZero}) is measured better by the fuselage
                                                                     system, so TASX will be used for $V$. The equation with the appropriate
                                                                     variables is then:
                                                                       
                                                                       \begin{equation}
                                                                     \alpha^*=\mathrm{CPITCH\_GP}-\arcsin\frac{\mathrm{CVSPD\_GP}}{\mathrm{TASX}}\label{eq:AOAeq}
                                                                     \end{equation}
                                                                     
                                                                     
                                                                     Calibration of the angle-of-attack then requires determining a function
                                                                     $f(\{x_{i}\})$ of measured quantities that matches $\alpha^*$ determined
                                                                     from (\ref{eq:AOAeq}). Possible terms in that function $\{x_{i}\}$
                                                                       may include ADIFR and related measurements of pressure as well as
                                                                     Mach number, attitude angles of the pod, etc.
                                                                     
                                                                     For the Rosemount 858 sensor used with the gust pod, it is expected
                                                                     from theory that one element of $\{x_{i}\}$ will be ADIFR\_GP/QC\_GP.
                                                                     Wind tunnel and theoretical studies predict how the pressure will
                                                                     vary on a hemispheric surface with changing angles, but those don't
                                                                     necessarily apply to the mounting location on the GV because there
                                                                     is considerable flow distortion at the under-wing location of the
                                                                     pod and that affects the pressure response to changes in flow angles.
                                                                     Therefore, the best approach is to use the above approach for that
                                                                     sensor also and determine a functional response that matches the calibration
                                                                     data. 

                                                                     
<<Initialization,echo=FALSE,include=F>>=
require(Ranadu)
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/GP-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=49)
#' @title standardVariables
#' @description Standard set of variables for data.frame
#' @details Sets a standard list of variable names in VarList suitable for use in a call to getNetCDF. Optionally, add "list" to the variables.
#' @details The standard variables are ATX, DPXC, EWX, GGALT, LATC,m LONC, MACHX, MR, PALT, PSXC, QCSC, TASX, WDC, WSC, WIC.
#' @aliases standardVariables StandardVariables
#' @author William Cooper
#' @export standardVariables
#' @param list An optional list of variable names to add to the standard list
#' @examples 
#' standardVariables (c("WIC", "PLWCC"))
standardVariables <- function (list=NULL) {
  VarList <-c("ATX", "DPXC", "EWX", "GGALT", "LATC", "LONC", 
              "MACHX", "MR", "PALT", "PSXC", "QCXC", "TASX", 
              "WDC", "WSC", "WIC") 
  if (length(list) > 0) {
    VarList <- c(VarList, list)
  }  
  return (VarList)
}

#' @title getNetCDF
#' @description Loads selected variables in a specified RAF-aircraft data file into a data.frame.
#' @details 'Time' is converted to a POSIXcf variable, and other variables specified in a VarList list are included in the data.frame. By default, the entire file is loaded, but optional arguments Start and End limit the time range.
#' @details This routine handles 25-Hz files also, but the Start/End option does not work for those files. The returned variables are single-dimension, and for 25 Hz files Time is returned as a sequence with fractional-second values.
#' @details If you get a long list of variable names, it probably indicates that one of the specified variables is not in this netCDF file.
#' @aliases getNetCDF getnetcdf
#' @author William Cooper
#' @import "ncdf"
#' @export getNetCDF
#' @param fname string, full file name 'e.g., "/home/Data/PREDICT/PREDICTrf01.nc"
#' @param VarList vector of variable names to load from the netCDF file
#' @param Start An optional numeric giving the desired start time in HHMMSS format
#' @param End An optional numeric giving the desired end time in HHMMSS format
#' @param F An optional numeric entered in the data.frame as a column 'FNo' all set to this integer
#' @return data.frame containing the specified variables as columns, along with 'Time' and optionally the flight number 'FNo'
#' @examples 
#' \dontrun{D <- getNetCDF ("PathToFile.nc", c("Var1", "Var2", "Var3"))}
#' \dontrun{D <- getNetCDF ("PathToFile.nc", c("Var1", "Var2"), 133000, 143000, 5)}
getNetCDF <- function (fname, VarList, Start=0, End=0, F=0) {
# This function reads the netCDF file 'fname' and extracts 
# the variables specified in 'VarList', returning the
# results in a data.frame. It includes the flight number F
# in the data.frame, as variable RF. It converts "Time",
# seconds after a reference time in the netCDF files, to
# a POSIXct date/time variable.
  netCDFfile = open.ncdf(fname)
  NV <- length (VarList)
  Time <- get.var.ncdf (netCDFfile, "Time")
  DL <- length (Time)
  # Expand Time to be high-rate
  if ("sps25" %in% names(netCDFfile$dim)) {
    T <- vector ("numeric", 25*length(Time))
    for (i in 1:length(Time)) {
      for (j in 0:24) {
        T[(i-1)*25+j+1] <- Time[i]+0.04*j
      }  
    }
    Time <- T
  }
  time_units <- att.get.ncdf (netCDFfile, "Time", "units")
  tref <- sub ('seconds since ', '', time_units$value)
  Time <- as.POSIXct(as.POSIXct(tref, tz='UTC')+Time, tz='UTC')
  # see if limited time range wanted:
  #i1 <- ifelse ((Start != 0), getIndex (Time, Start), 1)
  #i2 <- ifelse ((End != 0), getIndex (Time, End), length(Time))
  #r <- i1:i2
  #Time <- Time[r]
  #print(c("time range: ",i1,i2))
  SE <- getStartEnd (Time)
  print (c("File Times: From ", format(Time[1]), " to ", 
         format(Time[length(Time)])))
  d <- data.frame(Time)
  
  for (i in 1:length(VarList)) {
    X <- (get.var.ncdf(netCDFfile, VarList[i]))
    if ("sps25" %in% names(netCDFfile$dim)) {
      DM <- length(dim(X))
      if (DM == 2) {    # flatten
        dim(X) <- dim(X)[1]*dim(X)[2]
#       d[VarList[i]] <- X[r]
        d[VarList[i]] <- X
      } else {
        T <- vector ("numeric", 25*DL)
        for (k in 1:(DL-1)) {
          Nextk <- X[k+1]
          if ((is.na(X[k])) | (is.na(Nextk)) | (X[k] == -32767)) {
            for (j in 1:25) {
              T[(k-1)*25+j] <- -32767
            }
          } else {
            # handle heading wrap-around
            if (("THDG" %in% VarList[i]) | ("CTHDG_GP" %in% VarList[i])) {
              print (c("heading variable: ", VarList[i]))
              if ((Nextk-X[k]) > 300.) {
                Nextk <- Nextk - 360.
              }
              if ((Nextk-X[k]) < -300.) {
                Nextk <- Nextk + 360.
              }
            }
            for (j in 0:24) {
              T[(k-1)*25+j+1] <- X[k]+0.04*j*(Nextk-X[k])
            }
          }
        }
        k <- DL
        for (j in 0:24) {
          T[(k-1)*25+j+1] <- X[k]
        }      
#       d[VarList[i]] <- T[r]
        d[VarList[i]] <- T
      }
    } else {
      d[VarList[i]] <- X
    }
  }

  if (F != 0) {    # if specified, include the flight number
    RF <- rep (F, times=length(Time))    # label flight number
    #d["RF"] <- RF[r]
    d["RF"] <- RF
  }
  close.ncdf (netCDFfile)
  d[d == -32767.] <- NA   # replace missing-value with NA
  return (d)
}


VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
              "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
              "ADIFR", "AKRD", "SSLIP", "PITCH", "EWX",
              "ROLL", "THDG", "BDIFR", "EWX",
              "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
              "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
              "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
              "ATX")

capnF1 <- "The angle-of-attack determined from the fit, as a function of the reference angle provided by Equation (3), for the combination of data from all three speed runs as listed in the text."

@



In the standard coordinate system with $x$ forward, $y$ starboard,
and $z$ downward, the three corresponding components of the relative
wind are then:

%\[
\begin{equation}
\mathbf{v}=\left(\begin{array}{c}
u_{r}\\v_{r}\\w_{r}\end{array}\right)=\left(\begin{array}{c}V\\V\thinspace\tan\beta\\
V\thinspace\tan\alpha\end{array}\right)\label{eq:relative wind}\end{equation}
%\]

where $V$ is the true airspeed (10), $\alpha$ is the angle of attack
and $\beta$ is the sideslip angle. The latter are determined from the measured quantities according to the formulas (6) and (9), respectively. The sign convention is such that
the relative wind is positive when \emph{from }the direction of the
axis for each component. 

With true airspeed $V$ as calculated above from (\ref{eq:TASformula}), (\ref{eq:relative wind}) with
appropriate values for angle of attack and sideslip will give the
relative wind.

The next steps are then needed to convert the relative wind into Earth-relative wind components and produce new variables representing the wind measured by the gust probe.


\subsection*{Transformation to an Earth Reference Frame}

The gust-pod orientation is measured by an IRU in the pod, while the
aircraft orientation is measured by a fuselage-mounted IRS. Each measures
heading, pitch, and roll. There are again two alternate paths that
can be followed: Transform to the aircraft reference frame and use
the standard software (gusto.c), or transform to an Earth reference
frame directly and use the gust-pod ground speeds to obtain the wind.
The former takes advantage of the higher-quality IRU in the cabin,
but involves additional complications arising from contributions of
angular velocity of the aircraft and mis-alignment between the inertial
systems. The latter course will be followed here, but it may be worth
exploring if the former might give higher-quality measurements.

The required transformation is described by three rotation matrices,
defined in Bulletin 23 Eqs. 2.5 and 2.6:

\[
T_{1}=\left(\begin{array}{ccc}
1 & 0 & 0\\
0 & \cos\phi & -\sin\phi\\
0 & \sin\phi & \cos\phi
\end{array}\right)
\]


\[
T_{2}=\left(\begin{array}{ccc}
\cos\theta & 0 & \sin\theta\\
0 & 1 & 0\\
-\sin\theta & 0 & \cos\theta
\end{array}\right)
\]


\[
T_{3}=\left(\begin{array}{ccc}
\cos\psi & -\sin\psi & 0\\
\sin\psi & \cos\psi & 0\\
0 & 0 & 1
\end{array}\right)
\]


where \{$\phi,\,\theta,\,\psi$\} are \{roll, pitch, heading\}.

The transformation should be made in the following order: 
\begin{enumerate}
\item Rotate by $T_{1}$ using the roll angle $\phi^{\prime}$ measured
by the gust-pod IRU (CROLL\_GP) to level the wings by a rotation about
the x axis. 
\item Rotate by $T_{2}$ using the pitch angle $\theta^{\prime}$ (CPITCH\_GP)
to level the aircraft by a rotation about the y axis.
\item Rotate by $T_{3}$ using the heading angle $\psi^{\prime}$ (CTHDG\_GP)
to obtain components in a true-north reference frame. At this point,
the relative-wind vector in an Earth-reference coordinate system is
$\mathbf{v}_{r}=T_{3}(T_{2}(T_{1}\mathbf{v}))$ where $\mathbf{v}$
is given by (\ref{eq:relative wind}).
\end{enumerate}
At this point, the measured ground-speeds of the gust pod can be added
to the relative wind to get the true Earth-relative wind. The final
equations. defining new wind variables \{WDG, WSG, WIG\} corresponding
to \{WDC, WSC, WIC\} from the radome gust system, are:

\begin{equation}
\mathbf{v}_{g}=\mathbf{v}_{r}+\left(\begin{array}{c}
-\mathrm{CVNS\_GP}\\
-\mathrm{CVEW\_GP}\\
\mathrm{CVSPD\_GP}
\end{array}\right)\label{eq:vg}
\end{equation}
\begin{equation}
\mathrm{WDG=\arctan2(v_{g,y},}v_{g,x})\label{eq:wd}
\end{equation}
\begin{equation}
\mathrm{WSG=\sqrt{(v_{g,x}^{2}+v_{g,y}^{2})}}\label{eq:ws}
\end{equation}
\begin{equation}
\mathrm{WIG=v_{g,z}}\label{eq:wi}
\end{equation}

The R code that performs these calculations is embedded in the script that produced this memo and is called Calibration.Rnm. It will now use the calibrations of the gust pod to process the data file from RF05, as an example, in order to obtain wind measurements from the gust pod for comparison to those from the radome-based system. Measurements at 25 Hz will be used so that a possible phase shift between the two measurements can be studied.

<<Relative-Wind-Code,echo=F,include=F>>=

# now get the relative wind components
Flight <- "rf15"
fname = sprintf("/Data/DEEPWAVE/DW%shrx.nc", Flight)
# copy to a new file before adding variables to it:
fnew = sprintf("/Data/DEEPWAVE/DW%shr_GP.nc", Flight)
system(paste ("cp", fname, fnew, sep=' '), wait=TRUE)
# VarNames specifies a subset of the netCDF variables to
# use in this run:
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
        "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
        "AKRD", "SSLIP", "PITCH", "ROLL", "THDG", "EWX",
        "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
        "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
        "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
        "ATX")
Data <- getNetCDF (fnew, VarNames)
attach(Data)
Cradeg = pi / 180.
B2 <- QC_GP/PS_GP
AQR_GP <- ADIFR_GP/QC_GP # basic pressure ratio for AOA
RR2_GP <- QC_GP/PS_GP    # q/p ratio from the gust pod
BQR_GP <- BDIFR_GP / QC_GP
Mach <- MachNumber(PSXC,QCXC)
# B2 and AQR_GP are based only on the gust-pod measurements
BxM <- B2*Mach
#embed and fossilize cf3+GP, cfs_GP, cf4 for future use:
#cf3_GP <- c(-2.166904, 5.205568, -7.205783, 4.913143)
cf3_GP <- c( -2.125395, 5.592043, -4.383710, 3.926719 )
cfs_GP <- c(-3.498321, 11.443376)
cf4 <- c(-0.07790608, -1.15714339,  2.66908967, -1.35880409, -0.00466856,  0.53110059)
B3 <- cf4[1]+cf4[2]*B2+cf4[3]*BxM+cf4[4]*B2**2+cf4[5]*AQR_GP+cf4[6]*Mach
Vg <- TrueAirspeed (MachNumber (PS_GP, PS_GP*B3), ATX)
A2_GP <- cf3_GP[1]+cf3_GP[2]*AQR_GP+cf3_GP[3]*RR2_GP+cf3_GP[4]*Mach
S2_GP <- cfs_GP[1] + cfs_GP[2] * BQR_GP #+ cfs_GP[3] * RR2_GP + cfs_GP[4] * Mach
# dataframe for the relative wind:
d <- data.frame("U_RW"=Vg)
d["V_RW"] <- Vg * tan (S2_GP * Cradeg)
d["W_RW"] <- Vg * tan (A2_GP * Cradeg)
@


<<Rotation-matrices,echo=F,include=F>>=

rw <- as.matrix(d)
cosphi <- cos (CROLL_GP * Cradeg)
sinphi <- sin (CROLL_GP * Cradeg)
costheta <- cos (CPITCH_GP * Cradeg)
sintheta <- sin (CPITCH_GP * Cradeg)
cospsi <- cos (CTHDG_GP * Cradeg)
sinpsi <- sin (CTHDG_GP * Cradeg)
DL <- length(TASX)
One <- rep (1, DL)
Z <- rep (0, DL)
T1 <- array (c(One,Z,Z,Z,cosphi,-sinphi,Z,sinphi,cosphi), 
             dim=c(DL,3,3))
T2 <- array (c (costheta,Z,sintheta,Z,One,Z,-sintheta,Z,costheta),
             dim=c(DL,3,3))
T3 <- array (c (cospsi,-sinpsi,Z,sinpsi,cospsi,Z,Z,Z,One),
             dim=c(DL,3,3))
@

The code also attempts to flag bad CTHDG\_GP measurements,
which apparently occur as the heading moves through 180 deg,
by setting them to the standard missing-value number.
This would be better replaced by interpolation at these points.

<<Calculate-new-wind-variables-WDG-WSG-WIG,echo=F,include=F>>=

WDG <- vector ("numeric", DL)
WSG <- vector ("numeric", DL)
WIG <- vector ("numeric", DL)
Hlast <- 0.
for (i in 1:DL) {
  rwx <- matrix(rw[i,], 3, 1)
  Y1 <- aperm(T1[i,,]) %*% matrix (rw[i,], 3, 1)
  Y2 <- aperm(T2[i,,]) %*% Y1
  Y3 <- aperm(T3[i,,]) %*% Y2
  WG <- matrix (c(-CVNS_GP[i], -CVEW_GP[i], CVSPD_GP[i]), 
                3, 1)
  Y4 <- Y3 + WG
  WDG[i] <- atan2 (Y4[2], Y4[1]) / Cradeg
  if ((!is.na(WDG[i])) & (WDG[i] < 0.)) {
    WDG[i] <- WDG[i] + 360.
  }
  WSG[i] <- sqrt (Y4[1]**2 + Y4[2]**2)
  WIG[i] <- Y4[3]
           # attempt to flag bad CTHDG_GP points as missing
  if (!is.na(CTHDG_GP[i])) {
    if ((abs(CTHDG_GP[i]-Hlast) > 3.) 
                             & (abs(Hlast-180.) < 5.)) {
      WIG[i] <- NA
      WDG[i] <- NA
      WSG[i] <- NA
    }
  } else {
    WIG[i] <- NA
    WDG[i] <- NA
    WSG[i] <- NA    
  }
  if (!is.na(CTHDG_GP[i])) {
    Hlast <- CTHDG_GP[i]
  }
}
capn3 <- "WIG (vertical wind based on the gust pod) plotted against WIC (vertical wind from the conventional radome-based gust system)"
@


The code also adds the new variables to the netCDF file and the file is written when closed. This is the end of the processing.


<<Add-WIG-WDG-WSG-to-the-netCDF-file,echo=F,include=F>>=
# add new variables to the netCDF file:

netCDFfile <- open.ncdf (fnew, write=TRUE)

if ("sps25" %in% names(netCDFfile$dim)) {
  dim(WIG) <- c(25, dim(TASX)/25)
  dim(WSG) <- c(25, dim(TASX)/25)
  dim(WDG) <- c(25, dim(TASX)/25)

  varWIG <- var.def.ncdf ("WIG", "m/s", 
            c(netCDFfile$dim["sps25"], 
              netCDFfile$dim["Time"]), -32767.,
            "Vertical wind based on measurements from the gust pod")
  varWDG <- var.def.ncdf ("WDG", "deg.", 
            c(netCDFfile$dim["sps25"],
              netCDFfile$dim["Time"]), -32767.,
            "Wind direction based on measurements from the gust pod")
  varWSG <- var.def.ncdf ("WSG", "m/s", 
          c(netCDFfile$dim["sps25"],
            netCDFfile$dim["Time"]), -32767.,
          "Wind speed based on measurements from the gust pod")
} else {
  varWIG <- var.def.ncdf ("WIG", "m/s", 
            netCDFfile$dim["Time"], -32767.,
            "Vertical wind based on measurements from the gust pod")
  varWDG <- var.def.ncdf ("WDG", "deg.", 
            netCDFfile$dim["Time"], -32767.,
            "Wind direction based on measurements from the gust pod")
  varWSG <- var.def.ncdf ("WSG", "m/s", 
          netCDFfile$dim["Time"], -32767.,
          "Wind speed based on measurements from the gust pod") 
}
newfile <- var.add.ncdf (netCDFfile, varWIG)
newfile <- var.add.ncdf (newfile, varWDG)
newfile <- var.add.ncdf (newfile, varWSG)
put.var.ncdf (newfile, "WIG", WIG)
put.var.ncdf (newfile, "WDG", WDG)
put.var.ncdf (newfile, "WSG", WSG)
close.ncdf (newfile)

detach(Data)
rm(WIG, WDG, WSG)

@

Here are some plots that show the results. 


<<Plotted-Results-1, fig.cap=capn3, out.width="300pt", fig.align="center", echo=F,include=F>>=
# optionally, read the data back in. This is so that the later chunks can be run without need for reprocessing, which takes 20 min or so.

fnew = sprintf("/Data/DEEPWAVE/DW%shr_GP.nc", Flight)
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
              "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
              "ADIFR", "AKRD", "SSLIP", "PITCH", 
              "ROLL", "THDG", "BDIFR", "EWX",
              "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
              "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
              "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
              "ATX", "WIG", "WDG", "WSG")
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
        "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
        "AKRD", "SSLIP", "PITCH", "ROLL", "THDG", "EWX",
        "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
        "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
        "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
        "ATX", "WIG", "WDG", "WSG")
Data <- getNetCDF (fnew, VarNames) 
Valid <- ((Data$TASX > 130.) & (abs (Data$ROLL) < 10.) &
                 (abs(Data$VSPD) < 3))
Data <- Data[Valid,]     # create a new dataframe with only valid data
attach(Data)          
plot (WIC, WIG, ylab="WIG (gust pod vertical wind, m/s)",
      xlim=c(-5.,5.), ylim=c(-5.,5.),
      xlab="WIC, standard vertical wind [m/s]", pch=16, 
      cex=0.7, col='blue')
lines (c(-5.,5.), c(-5.,5.), lty=2, lwd=2, col='orange')
print (mean (WIG-WIC, na.rm=TRUE))
print (sd (WIG-WIC, na.rm=TRUE))
# text (1.,-3.5, "mean WIG-WIC: -0.21 m/s\nst dev 0.25 m/s")
capn4 <- "Angle of attack determined from gust-pod measurements, plotted vs. corresponding measurements AKRD from the standard wind sensing system"
@

<<Plotted-Results-2, fig.cap=capn4, out.width="300pt", fig.align="center", echo=F>>=
B2 <- QC_GP/PS_GP
AQR_GP <- ADIFR_GP/QC_GP # basic pressure ratio for AOA
RR2_GP <- QC_GP/PS_GP    # q/p ratio from the gust pod
BQR_GP <- BDIFR_GP / QC_GP
Mach <- MachNumber(PSXC,QCXC)
# B2 and AQR_GP are based only on the gust-pod measurements
BxM <- B2*Mach
#embed and fossilize cf3+GP, cfs_GP, cf4 for future use:
#cf3_GP <- c(-2.166904, 5.205568, -7.205783, 4.913143)
cf3_GP <- c( -2.125395, 5.592043, -4.383710, 3.926719 )
cfs_GP <- c(-3.498321, 11.443376)
cf4 <- c(-0.07790608, -1.15714339,  2.66908967, -1.35880409, -0.00466856,  0.53110059)
B3 <- cf4[1]+cf4[2]*B2+cf4[3]*BxM+cf4[4]*B2**2+cf4[5]*AQR_GP+cf4[6]*Mach
Vg <- TrueAirspeed (MachNumber (PS_GP, PS_GP*B3), ATX)
A2_GP <- cf3_GP[1]+cf3_GP[2]*AQR_GP+cf3_GP[3]*RR2_GP+cf3_GP[4]*Mach
plot (AKRD, A2_GP, pch=16, cex=0.7, xlab="AKRD [deg.]", 
      xlim=c(1.,5.), ylim=c(-2.,2.),
      ylab="AOA from GP [deg.]")
lines (c(0.0, 5.6), c(0.0-3.65, 5.6-3.66), lty=2, lwd=2, 
       col='orange')
capn5 <- "Comparison of horizontal wind measurements WDG and WSG from the gust pod (red lines) and from the standard wind measurements WDC and WSC (thicker blue lines)."
@

<<Plotted-Results-3, fig.cap=capn5, out.width="300pt", fig.align="center",echo=F,include=F>>=
op <- par (mfrow=c(2,1), mar=c(4,4,0,2)+0.1)
plotWAC (Time, WDC, ylab="Wind Direction [deg.]")
points (Time, WDG, type='l', col='red')
legend ("bottomright", legend=c("WDC", "WDG"), lty=1, col=c('blue', 'red'), cex=0.6)
plotWAC (Time, WSC, ylab="Wind Speed [m/s]")
points (Time, WSG, type='l', col='red')
legend ("bottomright", legend=c("WSC", "WSG"), lty=1, col=c('blue', 'red'), cex=0.6)
capn6 <- "Comparison of vertical wind measurements from the gust pod (red line) and from the standard wind measurement (WIC, blue line)."
@


<<Plotted-Results-4, fig.cap=capn6, out.width="300pt", fig.align="center",echo=F>>=
op <- par (mfrow=c(1,1), mar=c(4,4,5,2)+0.1)
plotWAC (Time, WIC, ylab="Vertical Wind [m/s]")
points (Time, WIG, type='l', col='red')
legend ("bottomright", legend=c("WIC", "WIG"), lty=1, col=c('blue', 'red'))
# sd (Data$WSC-WSG, na.rm=TRUE)
# sd (Data$WDC-WDG, na.rm=TRUE)
@




\begin{center}
\textsf{\textcolor{blue}{-- End of Memo --}}
\par\end{center}

\end{document}
