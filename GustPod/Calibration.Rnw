%% LyX 2.1.0 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[12pt,english]{report}
\usepackage{mathptmx}
\usepackage[T1]{fontenc}
\usepackage[letterpaper]{geometry}
\geometry{verbose,tmargin=3.54cm,bmargin=2.54cm,lmargin=2.54cm,rmargin=2.54cm,headheight=1cm,headsep=2cm,footskip=0.5cm}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{color}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\input colordvi
\usepackage{color}
\fancyhead{}
\fancyfoot[CE,CO]{}
\newtoks{\addressee} \global\addressee={}
\newdimen\longindent \longindent=3.5truein
\fancyhead[L]{Memo to: \the\addressee \\ \datetoday \\ Page \thepage \hfill}
\renewcommand{\headrulewidth}{0.0pt}
\newenvironment{lyxlist}[1]
{\begin{list}{}
{\settowidth{\labelwidth}{#1}
\setlength{\leftmargin}{\labelwidth}
\addtolength{\leftmargin}{\labelsep}
\renewcommand{\makelabel}[1]{##1\hfil}}}
{\end{list}}
\newcommand{\datetoday}{\number\day\space
     \ifcase\month\or January\or February\or March\or April\or May\or
     June\or July\or August\or September\or October\or November\or
     December\fi
     \space\number\year}
\newcommand{\EOLmemo}{\null \vskip-1.5truein
{\raggedright \textsf{\textsc{\large \textcolor{blue}{Earth Observing Laboratory}}}}\par
{\raggedright \textsf{\textsl{\textcolor{blue}{Memorandum:}}}} \par \vskip6pt
{\color{blue}{\hrule}}\par
\vskip0.3truein \leftline{\hskip \longindent \datetoday} \vskip0.2truein
\thispagestyle{empty}}
\newcommand{\attachm}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachments:] {#1}
\end{lyxlist}}
\newcommand{\cc}[1]{\begin{lyxlist}{Attachments:00}
\item [cc:] {#1}
\end{lyxlist}}
\newcommand{\attach}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachment:] {#1}
\end{lyxlist}}
%usage: \encl{A\\B\\C} or \cc{ma,e1\\name2\\name3}

\makeatother

\usepackage{babel}
\begin{document}
\EOLmemo 

\global\addressee={DEEPWAVE field catalog}% change "File" to the "To:" name

\begin{tabular}{ll}
\textsf{\textsc{\textcolor{blue}{To:}}} & \the\addressee\tabularnewline
\textsf{\textsc{\textcolor{blue}{From:}}} & Al Cooper\tabularnewline
 \textsf{\textsc{\textcolor{blue}{Subject:}}} & The gust-pod measurements on
the GV in DEEPWAVE\tabularnewline
\end{tabular}

\bigskip

                                                                    
                                                                     
                                                                     %
A separate memo describes the DEEPWAVE calibration of the gust-pod and of the radome gust-sensing system on the GV. Here, the gust-pod is described and processing for it outlined, in a form that incorporates R code for adding variables from the gust-pod to the standard netCDF data files for the project.                                                                     
                                                                     
                                                                     
<<Initialization,echo=FALSE,include=F>>=
require(Ranadu)
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/GP-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=49)

@

<<getNetCDF,echo=F,include=F>>=
#' @title standardVariables
#' @description Standard set of variables for data.frame
#' @details Sets a standard list of variable names in VarList suitable for use in a call to getNetCDF. Optionally, add "list" to the variables.
#' @details The standard variables are ATX, DPXC, EWX, GGALT, LATC,m LONC, MACHX, MR, PALT, PSXC, QCSC, TASX, WDC, WSC, WIC. Provide additional variables as arguments to add to this list.
#' @aliases standardVariables StandardVariables
#' @author William Cooper
#' @export standardVariables
#' @param list An optional list of variable names to add to the standard list
#' @examples 
#' standardVariables (c("VEW", "PLWCC"))
standardVariables <- function (list=NULL) {
  VarList <-c("ATX", "DPXC", "EWX", "GGALT", "LATC", "LONC", 
              "MACHX", "MR", "PALT", "PSXC", "QCXC", "TASX", 
              "WDC", "WSC", "WIC") 
  if (length(list) > 0) {
    VarList <- c(VarList, list)
  }  
  return (VarList)
}

#' @title getNetCDF
#' @description Loads selected variables in a specified RAF-aircraft data file into a data.frame.
#' @details 'Time' is converted to a POSIXcf variable, and other variables specified in a VarList list are included in the data.frame. By default, the entire file is loaded, but optional arguments Start and End limit the time range. The netCDF file is closed after reading the variables needed for the data.frame.
#' @details This routine handles 25-Hz files also, but the Start/End option does not work for those files. The returned variables are single-dimension, and for 25 Hz files Time is returned as a sequence with fractional-second values.
#' @details If you get an error message with a long list of variable names, it probably indicates that one of the specified variables is not in this netCDF file.
#' @aliases getNetCDF getnetcdf
#' @author William Cooper
#' @import "ncdf"
#' @export getNetCDF
#' @param fname string, full file name 'e.g., "/home/Data/PREDICT/PREDICTrf01.nc"
#' @param VarList vector of variable names to load from the netCDF file
#' @param Start An optional numeric giving the desired start time in HHMMSS format
#' @param End An optional numeric giving the desired end time in HHMMSS format
#' @param F An optional numeric entered in the data.frame as a column 'FNo' all set to this integer. This is useful if the resulting data.frames are combined, to be able to reference specific flights in the combined data.frame.
#' @return data.frame containing the specified variables as columns, along with 'Time' and optionally the flight number 'FNo'
#' @examples 
#' \dontrun{D <- getNetCDF ("PathToFile.nc", c("Var1", "Var2", "Var3"))}
#' \dontrun{D <- getNetCDF ("PathToFile.nc", c("Var1", "Var2"), 133000, 143000, 5)}
getNetCDF <- function (fname, VarList, Start=0, End=0, F=0) {
# This function reads the netCDF file 'fname' and extracts 
# the variables specified in 'VarList', returning the
# results in a data.frame. It includes the flight number F
# in the data.frame, as variable RF. It converts "Time",
# seconds after a reference time in the netCDF files, to
# a POSIXct date/time variable.
  netCDFfile = open.ncdf(fname)
  NV <- length (VarList)
  Time <- get.var.ncdf (netCDFfile, "Time")
  DL <- length (Time)
  # Expand Time to be high-rate
  if ("sps25" %in% names(netCDFfile$dim)) {
    T <- vector ("numeric", 25*length(Time))
    for (i in 1:length(Time)) {
      for (j in 0:24) {
        T[(i-1)*25+j+1] <- Time[i]+0.04*j
      }  
    }
    Time <- T
  }
  time_units <- att.get.ncdf (netCDFfile, "Time", "units")
  tref <- sub ('seconds since ', '', time_units$value)
  Time <- as.POSIXct(as.POSIXct(tref, tz='UTC')+Time, tz='UTC')
  # see if limited time range wanted:
  #i1 <- ifelse ((Start != 0), getIndex (Time, Start), 1)
  #i2 <- ifelse ((End != 0), getIndex (Time, End), length(Time))
  #r <- i1:i2
  #Time <- Time[r]
  #print(c("time range: ",i1,i2))
  SE <- getStartEnd (Time)
  print (c("File Times: From ", format(Time[1]), " to ", 
         format(Time[length(Time)])))
  d <- data.frame(Time)
  
  for (i in 1:length(VarList)) {
    X <- (get.var.ncdf(netCDFfile, VarList[i]))
    if ("sps25" %in% names(netCDFfile$dim)) {
      DM <- length(dim(X))
      if (DM == 2) {    # flatten
        dim(X) <- dim(X)[1]*dim(X)[2]
#       d[VarList[i]] <- X[r]
        d[VarList[i]] <- X
      } else {
        T <- vector ("numeric", 25*DL)
        for (k in 1:(DL-1)) {
          if ((is.na(X[k])) | (X[k] == -32767)) {
            for (j in 1:25) {
              T[(k-1)*25+j] <- -32767
            }
          } else {
            for (j in 0:24) {
              T[(k-1)*25+j+1] <- X[k]+0.04*j*(X[k+1]-X[k])
            }
          }
        }
        k <- DL
        for (j in 0:24) {
          T[(k-1)*25+j+1] <- X[k]
        }      
#       d[VarList[i]] <- T[r]
        d[VarList[i]] <- T
      }
    } else {
      d[VarList[i]] <- X
    }
  }

  if (F != 0) {    # if specified, include the flight number
    RF <- rep (F, times=length(Time))    # label flight number
    #d["RF"] <- RF[r]
    d["RF"] <- RF
  }
  close.ncdf (netCDFfile)
  d[d == -32767.] <- NA   # replace missing-value with NA
  return (d)
}

@


\section*{The Gust Pod}


\subsection*{The Components of the Relative Wind}

The gust pod is a new wind-sensing system developed by Allen Schanot. The key sensing element is a Rosemount 858 probe that  has five pressure-sensing holes located on a hemispheric cap pointed into the wind. The pressure difference between the two ports located upward and downward from centerline, measured as ADIFR\_GP, is used in the calculation of angle-of-attack. The similar pressure difference between the two ports located toward starboard and toward port of centerline, measured as BDIFR\_GP, are used in the calculation of sideslip. In addition, the probe has static ports located on the side of the cylinder carrying the hemispheric cap, and the difference between the pressure at the forward port and that at the static ports is measured as the dynamic pressure QC\_GP. The static pressure is also measured, as PS\_GP.

In addition, there is an inertial reference unit mounted with the gust pod to measure its attitude angles (roll, pitch, heading) and to measure the three components of motion of the aircraft relative to the Earth. This unit receives GPS information and uses it to update its measurements via a Kalman filter. The relevant variables in RAF data files have 
names like CPITCH_GP or CVEW_GP.

The measurements ADIFR\_GP and BDIFR\_GP, normalized by QC\_GP, are used with the calibrations in the preceding section to find the angle-of-attack and sideslip. In addition, to find the relative wind, a measurement of true airspeed (TAS) is needed. Determination of TAS from the gust-pod measurements alone was described in the memo on calibration for DEEPWAVE. 

In the standard coordinate system with $x$ forward, $y$ starboard,
and $z$ downward, the three corresponding components of the relative
wind are:

%\[
\begin{equation}
\mathbf{v}=\left(\begin{array}{c}
u_{r}\\v_{r}\\w_{r}\end{array}\right)=\left(\begin{array}{c}V\\V\thinspace\tan\beta\\
V\thinspace\tan\alpha\end{array}\right)\label{eq:relative wind}\end{equation}
%\]

where $V$ is the true airspeed (10), $\alpha$ is the angle of attack
and $\beta$ is the sideslip angle. The latter are determined from the measured quantities according to the formulas (6) and (9), respectively. The sign convention is such that
the relative wind is positive when \emph{from }the direction of the
axis for each component. 

With true airspeed $V$ as calculated above from (\ref{eq:TASformula}), (\ref{eq:relative wind}) with
appropriate values for angle of attack and sideslip will give the
relative wind.

The next steps are then needed to convert the relative wind into Earth-relative wind components and produce new variables representing the wind measured by the gust probe.


\subsection*{Transformation to an Earth Reference Frame}

The gust-pod orientation is measured by an IRU in the pod, while the
aircraft orientation is measured by a fuselage-mounted IRS. Each measures
heading, pitch, and roll. There are again two alternate paths that
can be followed: Transform to the aircraft reference frame and use
the standard software (gusto.c), or transform to an Earth reference
frame directly and use the gust-pod ground speeds to obtain the wind.
The former takes advantage of the higher-quality IRU in the cabin,
but involves additional complications arising from contributions of
angular velocity of the aircraft and mis-alignment between the inertial
systems. The latter course will be followed here, but it may be worth
exploring if the former might give higher-quality measurements.

The required transformation is described by three rotation matrices,
defined in Bulletin 23 Eqs. 2.5 and 2.6:

\[
T_{1}=\left(\begin{array}{ccc}
1 & 0 & 0\\
0 & \cos\phi & -\sin\phi\\
0 & \sin\phi & \cos\phi
\end{array}\right)
\]


\[
T_{2}=\left(\begin{array}{ccc}
\cos\theta & 0 & \sin\theta\\
0 & 1 & 0\\
-\sin\theta & 0 & \cos\theta
\end{array}\right)
\]


\[
T_{3}=\left(\begin{array}{ccc}
\cos\psi & -\sin\psi & 0\\
\sin\psi & \cos\psi & 0\\
0 & 0 & 1
\end{array}\right)
\]


where \{$\phi,\,\theta,\,\psi$\} are \{roll, pitch, heading\}.

The transformation should be made in the following order: 
\begin{enumerate}
\item Rotate by $T_{1}$ using the roll angle $\phi^{\prime}$ measured
by the gust-pod IRU (CROLL\_GP) to level the wings by a rotation about
the x axis. 
\item Rotate by $T_{2}$ using the pitch angle $\theta^{\prime}$ (CPITCH\_GP)
to level the aircraft by a rotation about the y axis.
\item Rotate by $T_{3}$ using the heading angle $\psi^{\prime}$ (CTHDG\_GP)
to obtain components in a true-north reference frame. At this point,
the relative-wind vector in an Earth-reference coordinate system is
$\mathbf{v}_{r}=T_{3}(T_{2}(T_{1}\mathbf{v}))$ where $\mathbf{v}$
is given by (\ref{eq:relative wind}).
\end{enumerate}
At this point, the measured ground-speeds of the gust pod can be added
to the relative wind to get the true Earth-relative wind. The final
equations. defining new wind variables \{WDG, WSG, WIG\} corresponding
to \{WDC, WSC, WIC\} from the radome gust system, are:

\begin{equation}
\mathbf{v}_{g}=\mathbf{v}_{r}+\left(\begin{array}{c}
-\mathrm{CVNS\_GP}\\
-\mathrm{CVEW\_GP}\\
\mathrm{CVSPD\_GP}
\end{array}\right)\label{eq:vg}
\end{equation}
\begin{equation}
\mathrm{WDG=\arctan2(v_{g,y},}v_{g,x})\label{eq:wd}
\end{equation}
\begin{equation}
\mathrm{WSG=\sqrt{(v_{g,x}^{2}+v_{g,y}^{2})}}\label{eq:ws}
\end{equation}
\begin{equation}
\mathrm{WIG=v_{g,z}}\label{eq:wi}
\end{equation}

The R code that performs these calculations is embedded in the script that produced this memo and is called Calibration.Rnm. It will now use the calibrations of the gust pod to process the data file from RF05, as an example, in order to obtain wind measurements from the gust pod for comparison to those from the radome-based system. Measurements at 25 Hz will be used so that a possible phase shift between the two measurements can be studied.

<<Relative-Wind-Code,echo=F,include=F>>=

# now get the relative wind components
Flight <- "rf23"
fname = sprintf("/home/Data/DEEPWAVE/DEEPWAVE%s.nc", Flight)
# copy to a new file before adding variables to it:
fnew = sprintf("/home/Data/DEEPWAVE/DW%s_GP.nc", Flight)
system(paste ("cp", fname, fnew, sep=' '), wait=TRUE)
# VarNames specifies a subset of the netCDF variables to
# use in this run:
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
        "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
        "AKRD", "SSLIP", "PITCH", "ROLL", "THDG", "ADIFR",
        "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
        "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
        "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
        "ATX")
Data <- getNetCDF (fnew, VarNames)
attach(Data)
B2 <- QC_GP/PS_GP
AQR_GP <- ADIFR_GP/QC_GP # basic pressure ratio for AOA
RR2_GP <- QC_GP/PS_GP    # q/p ratio from the gust pod
BQR_GP <- BDIFR_GP / QC_GP
Mach <- MachNumber(PSXC,QCXC)
# B2 and AQR_GP are based only on the gust-pod measurements
BxM <- B2*Mach
#embed and fossilize cf3+GP, cfs_GP, cf4 for future use:
#cf3_GP <- c(-2.166904, 5.205568, -7.205783, 4.913143)
cf3r <- c(4.1079717, 21.872829, 82.6157340, -135.8737038, 77.4028078, 0.5531502) # order is const, AQR, AQR*M, AQR*M**2, AQR*M**3, Mach
AQR <- ADIFR/QCXC
AQRM <- AQR * Mach
AQRM2 <- AQR * Mach**2
AQRM3 <- AQR * Mach**3
A2 <- cf3r[1]+cf3r[2]*AQR+cf3r[3]*AQRM+cf3r[4]*AQRM2+cf3r[5]*AQRM3+cf3r[6]*Mach
cf3_GP <- c( -2.125395, 5.592043, -4.383710, 3.926719 )
cfs_GP <- c(-3.498321, 11.443376)
cf4 <- c(-0.07790608, -1.15714339,  2.66908967, -1.35880409, -0.00466856,  0.53110059)
B3 <- cf4[1]+cf4[2]*B2+cf4[3]*BxM+cf4[4]*B2**2+cf4[5]*AQR_GP+cf4[6]*Mach
Vg <- TrueAirspeed (MachNumber (PS_GP, PS_GP*B3), ATX)
A2_GP <- cf3_GP[1]+cf3_GP[2]*AQR_GP+cf3_GP[3]*RR2_GP+cf3_GP[4]*Mach
S2_GP <- cfs_GP[1] + cfs_GP[2] * BQR_GP #+ cfs_GP[3] * RR2_GP + cfs_GP[4] * Mach
# dataframe for the relative wind:
d <- data.frame("U_RW"=Vg)
d["V_RW"] <- Vg * tan (S2_GP * Cradeg)
d["W_RW"] <- Vg * tan (A2_GP * Cradeg)
@


<<Rotation-matrices,echo=F,include=F>>=

rw <- as.matrix(d)
cosphi <- cos (CROLL_GP * Cradeg)
sinphi <- sin (CROLL_GP * Cradeg)
costheta <- cos (CPITCH_GP * Cradeg)
sintheta <- sin (CPITCH_GP * Cradeg)
cospsi <- cos (CTHDG_GP * Cradeg)
sinpsi <- sin (CTHDG_GP * Cradeg)
DL <- length(TASX)
One <- rep (1, DL)
Z <- rep (0, DL)
T1 <- array (c(One,Z,Z,Z,cosphi,-sinphi,Z,sinphi,cosphi), 
             dim=c(DL,3,3))
T2 <- array (c (costheta,Z,sintheta,Z,One,Z,-sintheta,Z,costheta),
             dim=c(DL,3,3))
T3 <- array (c (cospsi,-sinpsi,Z,sinpsi,cospsi,Z,Z,Z,One),
             dim=c(DL,3,3))
@

The code also attempts to flag bad CTHDG\_GP measurements,
which apparently occur as the heading moves through 180 deg,
by setting them to the standard missing-value number.
This would be better replaced by interpolation at these points.

<<Calculate-new-wind-variables-WDG-WSG-WIG,echo=F,include=F>>=

WDG <- vector ("numeric", DL)
WSG <- vector ("numeric", DL)
WIG <- vector ("numeric", DL)
WIX <- vector ("numeric", DL)
Hlast <- 0.
for (i in 1:DL) {
  rwx <- matrix(rw[i,], 3, 1)
  Y1 <- aperm(T1[i,,]) %*% matrix (rw[i,], 3, 1)
  Y2 <- aperm(T2[i,,]) %*% Y1
  Y3 <- aperm(T3[i,,]) %*% Y2
  WG <- matrix (c(-CVNS_GP[i], -CVEW_GP[i], CVSPD_GP[i]), 
                3, 1)
  Y4 <- Y3 + WG
  WDG[i] <- atan2 (Y4[2], Y4[1]) / Cradeg
  if ((!is.na(WDG[i])) & (WDG[i] < 0.)) {
    WDG[i] <- WDG[i] + 360.
  }
  WSG[i] <- sqrt (Y4[1]**2 + Y4[2]**2)
  WIG[i] <- Y4[3]
           # attempt to flag bad CTHDG_GP points as missing
  if (!is.na(CTHDG_GP[i])) {
    if ((abs(CTHDG_GP[i]-Hlast) > 3.) 
                             & (abs(Hlast-180.) < 5.)) {
      WIG[i] <- NA
      WDG[i] <- NA
      WSG[i] <- NA
    }
  } else {
    WIG[i] <- NA
    WDG[i] <- NA
    WSG[i] <- NA    
  }
  if (!is.na(CTHDG_GP[i])) {
    Hlast <- CTHDG_GP[i]
  }
}
WIX <- TASX * sin((A2-PITCH)*Cradeg) + VSPD
capn3 <- "WIG (vertical wind based on the gust pod) plotted against WIC (vertical wind from the conventional radome-based gust system)"
@


The code also adds the new variables to the netCDF file and the file is written when closed. This is the end of the processing.


<<Add-WIG-WDG-WSG-to-the-netCDF-file,echo=F,include=F>>=
# add new variables to the netCDF file:

netCDFfile <- open.ncdf (fnew, write=TRUE)

if ("sps25" %in% names(netCDFfile$dim)) {
  dim(WIG) <- c(25, dim(TASX)/25)
  dim(WSG) <- c(25, dim(TASX)/25)
  dim(WDG) <- c(25, dim(TASX)/25)
  dim(WIX) <- c(25, dim(TASX)/25)

  varWIG <- var.def.ncdf ("WIG", "m/s", 
            c(netCDFfile$dim["sps25"], 
              netCDFfile$dim["Time"]), -32767.,
            "Vertical wind based on measurements from the gust pod")
  varWDG <- var.def.ncdf ("WDG", "deg.", 
            c(netCDFfile$dim["sps25"],
              netCDFfile$dim["Time"]), -32767.,
            "Wind direction based on measurements from the gust pod")
  varWSG <- var.def.ncdf ("WSG", "m/s", 
          c(netCDFfile$dim["sps25"],
            netCDFfile$dim["Time"]), -32767.,
          "Wind speed based on measurements from the gust pod")
  varWIX <- var.def.ncdf ("WIX", "m/s", 
          c(netCDFfile$dim["sps25"],
            netCDFfile$dim["Time"]), -32767.,
          "Vertical Wind, recalibrated radome")
} else {
  varWIG <- var.def.ncdf ("WIG", "m/s", 
            netCDFfile$dim["Time"], -32767.,
            "Vertical wind based on measurements from the gust pod")
  varWDG <- var.def.ncdf ("WDG", "deg.", 
            netCDFfile$dim["Time"], -32767.,
            "Wind direction based on measurements from the gust pod")
  varWSG <- var.def.ncdf ("WSG", "m/s", 
          netCDFfile$dim["Time"], -32767.,
          "Wind speed based on measurements from the gust pod") 
  varWIX <- var.def.ncdf ("WIX", "m/s", 
          netCDFfile$dim["Time"], -32767.,
          "Vertical wind based on recalibrated measurements from the radome") 
}
newfile <- var.add.ncdf (netCDFfile, varWIG)
newfile <- var.add.ncdf (newfile, varWDG)
newfile <- var.add.ncdf (newfile, varWSG)
newfile <- var.add.ncdf (newfile, varWIX)
put.var.ncdf (newfile, "WIG", WIG)
put.var.ncdf (newfile, "WDG", WDG)
put.var.ncdf (newfile, "WSG", WSG)
put.var.ncdf (newfile, "WIX", WIX)
close.ncdf (newfile)

detach(Data)
rm(WIG, WDG, WSG, WIX)

@

Here are some plots that show the results. 


<<Plotted-Results-1, fig.cap=capn3, out.width="300pt", fig.align="center", echo=F,include=F>>=
# optionally, read the data back in. This is so that the later chunks can be run without need for reprocessing, which takes 20 min or so.
Flight <- "rf05"        # this was the flight with cal maneuvers
Flight <- "rf23"
fnew = sprintf("/Data/DEEPWAVE/DW%s_GP.nc", Flight)
#fnew = sprintf("/Data/DEEPWAVE/DW%shr_save.nc", Flight)
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
              "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
              "ADIFR", "AKRD", "SSLIP", "PITCH", 
              "ROLL", "THDG", "BDIFR", "EWX",
              "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
              "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
              "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
              "ATX", "WIG", "WDG", "WSG", "WIX")
VarNames <- c("VYC","GGALT","LATC", "LONC", "PSXC", "QCXC",
        "WDC", "WSC", "GGVEW", "GGVNS", "VEW", "VNS", "TASX",
        "AKRD", "SSLIP", "PITCH", "ROLL", "THDG", "ADIFR",
        "ADIFR_GP", "BDIFR_GP", "PS_GP", "QC_GP",
        "CROLL_GP", "CPITCH_GP", "CTHDG_GP", "WIC",
        "CVNS_GP", "CVEW_GP", "VSPD", "CVSPD_GP",
        "ATX", "WIG", "WDG", "WSG", "WIX")
Data <- getNetCDF (fnew, VarNames) 
Valid <- ((Data$TASX > 130.) & (abs (Data$ROLL) < 10.) &
                 (abs(Data$VSPD) < 3))
Data <- Data[Valid,]     # create a new dataframe with only valid data
attach(Data)          
cf3r <- c(4.1079717, 21.872829, 82.6157340, -135.8737038, 77.4028078, 0.5531502) # order is const, AQR, AQR*M, AQR*M**2, AQR*M**3, Mach
Mach <- MachNumber(PSXC,QCXC)
AQR <- ADIFR/QCXC
AQRM <- AQR * Mach
AQRM2 <- AQR * Mach**2
AQRM3 <- AQR * Mach**3
A2 <- cf3r[1]+cf3r[2]*AQR+cf3r[3]*AQRM+cf3r[4]*AQRM2+cf3r[5]*AQRM3+cf3r[6]*Mach
plot (WIC, WIG, ylab="WIG (gust pod vertical wind, m/s)",
      xlim=c(-5.,5.), ylim=c(-5.,5.),
      xlab="WIC, standard vertical wind [m/s]", pch=16, 
      cex=0.7, col='blue')
lines (c(-5.,5.), c(-5.,5.), lty=2, lwd=2, col='orange')
print (mean (WIG-WIC, na.rm=TRUE))
print (sd (WIG-WIC, na.rm=TRUE))
# text (1.,-3.5, "mean WIG-WIC: -0.21 m/s\nst dev 0.25 m/s")
plot (WIC, WIX, ylab="WIX (recal WIC, m/s", pch=16, cex=0.7)
plot(A2,AKRD, pch=16, cex=0.7)
lines (c(-20.,20.),c(-20.,20.),col='darkorange',lwd=2)

capn4 <- "Angle of attack determined from gust-pod measurements, plotted vs. corresponding measurements AKRD from the standard wind sensing system"
@

<<Plotted-Results-2, fig.cap=capn4, out.width="300pt", fig.align="center", echo=F>>=
B2 <- QC_GP/PS_GP
AQR_GP <- ADIFR_GP/QC_GP # basic pressure ratio for AOA
RR2_GP <- QC_GP/PS_GP    # q/p ratio from the gust pod
BQR_GP <- BDIFR_GP / QC_GP
Mach <- MachNumber(PSXC,QCXC)
# B2 and AQR_GP are based only on the gust-pod measurements
BxM <- B2*Mach
#embed and fossilize cf3+GP, cfs_GP, cf4 for future use:
#cf3_GP <- c(-2.166904, 5.205568, -7.205783, 4.913143)
cf3_GP <- c( -2.125395, 5.592043, -4.383710, 3.926719 )
cfs_GP <- c(-3.498321, 11.443376)
cf4 <- c(-0.07790608, -1.15714339,  2.66908967, -1.35880409, -0.00466856,  0.53110059)
B3 <- cf4[1]+cf4[2]*B2+cf4[3]*BxM+cf4[4]*B2**2+cf4[5]*AQR_GP+cf4[6]*Mach
Vg <- TrueAirspeed (MachNumber (PS_GP, PS_GP*B3), ATX)
A2_GP <- cf3_GP[1]+cf3_GP[2]*AQR_GP+cf3_GP[3]*RR2_GP+cf3_GP[4]*Mach
plot (AKRD, A2_GP, pch=16, cex=0.7, xlab="AKRD [deg.]", 
      xlim=c(1.,5.), ylim=c(-2.,2.),
      ylab="AOA from GP [deg.]")
lines (c(0.0, 5.6), c(0.0-3.65, 5.6-3.66), lty=2, lwd=2, 
       col='orange')
capn5 <- "Comparison of horizontal wind measurements WDG and WSG from the gust pod (red lines) and from the standard wind measurements WDC and WSC (thicker blue lines)."
@

<<Plotted-Results-3, fig.cap=capn5, out.width="300pt", fig.align="center",echo=F,include=F>>=
op <- par (mfrow=c(2,1), mar=c(4,4,0,2)+0.1)
plotWAC (Time, WDC, ylab="Wind Direction [deg.]")
points (Time, WDG, type='l', col='red')
legend ("bottomright", legend=c("WDC", "WDG"), lty=1, col=c('blue', 'red'), cex=0.6)
plotWAC (Time, WSC, ylab="Wind Speed [m/s]")
points (Time, WSG, type='l', col='red')
legend ("bottomright", legend=c("WSC", "WSG"), lty=1, col=c('blue', 'red'), cex=0.6)
capn6 <- "Comparison of vertical wind measurements from the gust pod (red line) and from the standard wind measurement (WIC, blue line)."
@


<<Plotted-Results-4, fig.cap=capn6, out.width="300pt", fig.align="center",echo=F>>=
op <- par (mfrow=c(1,1), mar=c(4,4,5,2)+0.1)
plotWAC (Time, WIC, ylab="Vertical Wind [m/s]")
points (Time, WIG, type='l', col='red')
legend ("bottomright", legend=c("WIC", "WIG"), lty=1, col=c('blue', 'red'))
# sd (Data$WSC-WSG, na.rm=TRUE)
# sd (Data$WDC-WDG, na.rm=TRUE)
@






\begin{figure}
\noindent \begin{centering}
\includegraphics[width=10cm]{GPrf11Fig1}
\par\end{centering}

\protect\caption{\label{fig:3panelHWVW}A comparison between the conventional wind
components (blue lines) and the wind from the gust pod (red lines).
Data from flight RF05.}
\end{figure}
Some plots showing the nature of the new variables (WDG,
WSG, WIG) are included here. The first one (Fig.~\ref{fig:3panelHWVW}) shows a comparison
of all three wind variables for a segment from flight RF11. The spike
in WSG at about 9:43 has a known origin and will be removed. There
is also a short period near 9:23 when the vertical wind measurements
appear offset by a few tenths m/s. Otherwise, the gust pod provides
a good representation of the standard variables. 
\begin{figure}
\noindent \begin{centering}
\includegraphics[width=10cm]{GPrf11Fig2}
\par\end{centering}

\protect\caption{\label{fig:ExpandedViewF1}An expanded view of a section of Fig.~\ref{fig:3panelHWVW}.}


\end{figure}
Figure \ref{fig:ExpandedViewF1} shows an expanded view and emphasizes
the small difference between wind speeds from the two systems; this
is likely caused by IRU differences and can later be improved by reference
to the GPS signals with OMNISTAR. The similarities and differences
in WIG vs WIC are also more evident in this figure.

\begin{figure}
\noindent \begin{centering}
\includegraphics[width=10cm]{GPrf11Fig5}
\par\end{centering}

\protect\caption{\label{fig:VarSpecWICandWIG}variance spectra for WIC (red line, and
also shown smoothed as the blue line), compared to the spectrum for
WIG from the gust pod (green line). Data from flight RF05, 9:15:00--9:40:00.}


\end{figure}
Figure \ref{fig:VarSpecWICandWIG} shows the high-rate variance spectra
from the two systems. There is a significant difference at frequencies
above about 3 Hz, with the gust-pod distribution dropping faster but
the standard wind W(C showing more variance. The high frequency spectrum
from the gust pod may be more realistic; it is unusual to see high
variance at these frequencies without a related generating source.
These spectra were also studied for coherence, which was above 0.9
for frequencies less than 1 Hz but then fell to around 0.2 at 10 Hz.
This is an indication that the two measurements are different in important
ways at the high frequency. This would not be the case if they were
responding with different amplitudes; the signals must really be mostly
incoherent at the highest frequency. The separation wing-to-fuselage
is about 7 m lateral and 13 m longitudinal, so that doesn't seem enough
to cause the low high-frequency coherence. The phase changes from
in-phase at frequencies less than 1 Hz to 180$^{\circ}$ out-of-phase
at 9 Hz, with WIG lagging, so this is consistent with the longitudinal
offset. Shifting WIG relative to WIC also gave maximum coherence if
WIG were shifted forward 1/25 s. 
\begin{figure}
\noindent \begin{centering}
\includegraphics[width=10cm]{GPrf11WIGshiftM1}
\par\end{centering}

\protect\caption{\label{fig:FurtherExpandedWIGshifted}Comparison of WIG (red line)
and WIC (blue line) after shifting WIG 1/25 s earlier to compensate
for the longitudinal displacement of the sensor.}


\end{figure}
 With this shift, there does not appear to be any difference in phase
between the two measurements.

It is important to note that the gust pod does not yet perform well
in turns. The reason is that the orientation of the gust-pod IRU is
not perfectly along the longitudinal axis of the aircraft, and as
a result any roll of the aircraft introduces complex combinations
of roll, heading, and pitch into the gust-pod IRU. It should be possible
to remove these to some extent, although differences in alignment
of the IRU from flight to flight may perturb these angles and make
it difficult to get good measurements in turns. The circle maneuvers
from the calibration flight should provide valuable information regarding
the potential for improving the in-turn performance of the gust pod
.


\section*{Next Steps}
\begin{enumerate}
\item A procedure for processing the gust-pod measurements will be needed.
It may be possible to use code in gusto.c for this purpose or otherwise
to implement the process used here into nimbus, because this is being
done second-by-second as needed for nimbus. Alternately, the code
used here can run after nimbus processing to add the gust-pod variables. If this course is followed, the R script could be improved because
I didn't vectorize the angle transformations yet, in the interest
of getting it to work first.
The software / data processing group will have to decide which is
better, and it may be preferable to use different procedures for DEEPWAVE
and for future use in order to produce the DEEPWAVE data quickly.
\item As noted above, there are issues with the gust-pod measurements in
turns that need to be addressed. These issues will affect the standard
data also because in turbulence the roll changes and this may feed
into the other measurements even at small roll angles.
\item The relative timing of the measurements entering the calculation of
wind still needs to be addressed. The IRU information is transmitted
for recording with some delay, and corrections for those delays are
in place. However, small errors in those delays can cause phase shifts
among the measurements that, for example, result in residual perturbations
of the vertical wind during pitch maneuvers. These should be tuned
to minimize those perturbations.
\item An additional worthwhile study will be to see if using GPS measurements
to determine the Schuler oscillation can improve measurements of pitch
and heading and so lead to improved wind measurements. There is some
evidence of this problem in an apparent changing offset in the vertical
wind, so any improvement here can be very useful to DEEPWAVE.
\end{enumerate}




\begin{center}
\textsf{\textcolor{blue}{-- End of Memo --}}
\par\end{center}

\end{document}
